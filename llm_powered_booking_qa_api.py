# -*- coding: utf-8 -*-
"""LLM Powered Booking QA API.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PLbaQQ6wzJNLKXmQn4WCSwoDiGawXJ_5
"""
# Importing filess to uplaod dataset into colab notebook
from google.colab import files
u = files.upload()

# Importing pandas to load data into dataframe
import pandas as pd
df = pd.read_csv('hotel_bookings.csv')
df.head()

df.info()

df.describe()

df.columns

# Checking for null values
df.isnull().sum()

# Filing null values
df["children"].fillna(0, inplace=True)
df["country"].fillna("Unknown", inplace=True)
df["agent"].fillna(0, inplace=True)
df["company"].fillna(0, inplace=True)

df.isnull().sum()

df["reservation_status_date"] = pd.to_datetime(df["reservation_status_date"])

# Visualizing the revenue over time
import matplotlib.pyplot as plt
import seaborn as sns

# Group by year and month, summing revenue
df["revenue"] = df["adr"] * (df["stays_in_week_nights"] + df["stays_in_weekend_nights"])
monthly_revenue = df.groupby(["arrival_date_year", "arrival_date_month"])["revenue"].sum().reset_index()

# Plotting revenue trends
plt.figure(figsize=(12, 6))
sns.lineplot(x=monthly_revenue["arrival_date_month"], y=monthly_revenue["revenue"], hue=monthly_revenue["arrival_date_year"])
plt.xticks(rotation=45)
plt.title("Revenue Trends Over Time")
plt.xlabel("Month")
plt.ylabel("Total Revenue")
plt.show()

# Calculation of cancellation rate
cancellation_rate = df["is_canceled"].mean() * 100
print(f"Cancellation Rate: {cancellation_rate:.2f}%")

import geopandas as gpd

# Count bookings by country
country_counts = df["country"].value_counts().reset_index()
country_counts.columns = ["country", "count"]

# Visualize top 10 booking countries
plt.figure(figsize=(12, 6))
sns.barplot(y=country_counts["country"][:10], x=country_counts["count"][:10])
plt.xlabel("Number of Bookings")
plt.ylabel("Country")
plt.title("Top 10 Booking Countries")
plt.show()

plt.figure(figsize=(10, 5))
sns.histplot(df["lead_time"], bins=50, kde=True)
plt.title("Booking Lead Time Distribution")
plt.xlabel("Days Before Check-in")
plt.ylabel("Count")
plt.show()

# FASISS for vectorizing the data and sentence transformer.
import faiss
from sentence_transformers import SentenceTransformer
import numpy as np

# Load embedding model
model = SentenceTransformer("all-MiniLM-L6-v2")

# Convert dataset rows into text format for vectorization
df["text"] = df.apply(lambda row: f"Hotel: {row.hotel}, Date: {row.arrival_date_month} {row.arrival_date_year}, Revenue: {row.revenue}, Country: {row.country}, Canceled: {row.is_canceled}", axis=1)

# Generate embeddings
embeddings = model.encode(df["text"].tolist(), show_progress_bar=True)

# Store embeddings in FAISS
index = faiss.IndexFlatL2(embeddings.shape[1])
index.add(np.array(embeddings))

# Save the FAISS index
faiss.write_index(index, "faiss_index.bin")

from transformers import pipeline

# Loaded a lightweight LLM
qa_pipeline = pipeline("text2text-generation", model="google/flan-t5-small")

def query_rag(question):
    """Retrieve relevant booking data and answer the question"""
    question_embedding = model.encode([question])
    _, idxs = index.search(np.array(question_embedding), k=3)

    # Retrieved relevant text
    retrieved_text = "\n".join(df.iloc[idx]["text"] for idx in idxs[0])

    # Generated the response
    response = qa_pipeline(f"Context: {retrieved_text}\nQuestion: {question}")
    return response[0]["generated_text"]

# Example query
print(query_rag("What is the average revenue in July 2017?"))

# API Integration using FastAPI
from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

class AnalyticsRequest(BaseModel):
    request_type: str

class QARequest(BaseModel):
    question: str

@app.post("/analytics")
def get_analytics(req: AnalyticsRequest):
    """Return requested analytics"""
    if req.request_type == "revenue_trends":
        return {"revenue_trends": monthly_revenue.to_dict()}
    elif req.request_type == "cancellation_rate":
        return {"cancellation_rate": f"{cancellation_rate:.2f}%"}
    else:
        return {"error": "Invalid request type"}

@app.post("/ask")
def ask_question(req: QARequest):
    """Answer booking-related questions"""
    return {"answer": query_rag(req.question)}

# Run the API
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
